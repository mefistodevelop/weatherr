{"version":3,"sources":["components/Spinner/images/spinner.svg","keys.js","api/api.js","components/Search/Search.jsx","store/store.js","components/Spinner/Spinner.jsx","components/Location/Location.jsx","components/Weather/Weather.jsx","components/Content/Content.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_KEY","BASE_URL","instance","axios","create","baseURL","headers","api","city","get","then","response","data","Search","setWeather","setIsFetching","useState","query","setQuery","send","e","a","key","weather","className","type","placeholder","value","onChange","target","onKeyPress","useGlobal","globalHook","React","isFetching","store","setState","Spinner","size","src","spinnerImage","width","alt","Location","country","Weather","temperature","roundedTemperature","Math","round","Content","isWeatherDefined","name","sys","main","temp","App","globalState","globalActions","Object","keys","length","toLowerCase","defineClassname","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4b114de3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.b101b486.svg\";","module.exports = {\n  API_KEY: 'cb10a7cb11e6b08e1f61144ad85f7af3',\n  BASE_URL: 'https://cors-anywhere.herokuapp.com/https://api.openweathermap.org/data/2.5/',\n};\n","import axios from 'axios';\nimport { BASE_URL, API_KEY } from '../keys';\n\nconst instance = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'API-KEY': API_KEY,\n  },\n});\n\nexport const api = {\n  getWeather(city) {\n    return instance\n      .get(`weather?q=${city}&units=metric&appid=${API_KEY}`)\n      .then((response) => response.data);\n  },\n};\n","import React, { useState } from 'react';\nimport './Search.css';\nimport { api } from '../../api/api';\n\nexport const Search = ({ setWeather, setIsFetching }) => {\n  const [query, setQuery] = useState('');\n\n  const updateQuery = (e) => setQuery(e.target.value);\n  const send = async (e) => {\n    if (e.key === 'Enter') {\n      setIsFetching(true);\n      const weather = await api.getWeather(query);\n      setIsFetching(false);\n      setWeather(weather);\n      setQuery('');\n    }\n  };\n  return (\n    <div className=\"search\">\n      <input\n        type=\"text\"\n        className=\"search__bar\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={updateQuery}\n        onKeyPress={send}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport globalHook from 'use-global-hook';\n\nconst initialState = {\n  weather: {},\n  isFetching: false,\n};\n\nconst actions = {\n  setWeather: (store, weather) => {\n    store.setState({ weather });\n  },\n  setIsFetching(store, isFetching) {\n    store.setState({ isFetching });\n  },\n};\n\nexport const useGlobal = globalHook(React, initialState, actions);\n","import React from 'react';\nimport './Spinner.css';\nimport spinnerImage from './images/spinner.svg';\n\nfunction Spinner({ size }) {\n  return (\n    <div className=\"spinner\">\n      <img\n        className=\"spinner__image\"\n        src={spinnerImage}\n        width={size}\n        alt=\"loading progress spinner\"\n      />\n    </div>\n  );\n}\n\nexport default Spinner;\n","import React from 'react';\nimport './Location.css';\n\nexport const Location = ({ city, country }) => (\n  <div className=\"location\">\n    <span className=\"location__name\">{`${city}, ${country}`}</span>\n  </div>\n);\n","import React from 'react';\nimport './Weather.css';\n\nexport const Weather = ({ temperature, weather }) => {\n  const roundedTemperature = Math.round(temperature);\n  return (\n    <div className=\"weather\">\n      <div className=\"weather__temperature\">{`${roundedTemperature}Â°C`}</div>\n      <div className=\"weather__description\">{weather}</div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Location } from '../Location/Location';\nimport { Weather } from '../Weather/Weather';\n\nexport const Content = ({ store, isWeatherDefined }) => (\n  <div className=\"content\">\n    {isWeatherDefined() ? (\n      <>\n        <Location city={store.name} country={store.sys.country} />\n        <Weather\n          temperature={store.main.temp}\n          weather={store.weather[0].main}\n        />\n      </>\n    ) : (\n      ''\n    )}\n  </div>\n);\n","import React from 'react';\nimport './App.css';\nimport { Search } from './components/Search/Search';\nimport { useGlobal } from './store/store';\nimport Spinner from './components/Spinner/Spinner';\nimport { Content } from './components/Content/Content';\n\nfunction App() {\n  const [globalState, globalActions] = useGlobal();\n\n  function isWeatherDefined() {\n    if (Object.keys(globalState.weather).length !== 0) {\n      return true;\n    }\n    return false;\n  }\n\n  function defineClassname() {\n    if (!isWeatherDefined()) return;\n\n    const weather = globalState.weather.weather[0].main.toLowerCase();\n    const temperature = globalState.weather.main.temp;\n\n    if (weather === 'rain') return weather;\n    if (Math.round(temperature) >= 28) return 'hot';\n    if (Math.round(temperature) <= 5) return 'cold';\n  }\n\n  return (\n    <div className={`App ${defineClassname()}`}>\n      <div className=\"App__wrapper\">\n        <Search\n          setWeather={globalActions.setWeather}\n          setIsFetching={globalActions.setIsFetching}\n        />\n\n        {globalState.isFetching\n          ? <Spinner size={100} />\n          : (\n            <Content store={globalState.weather} isWeatherDefined={isWeatherDefined} />\n          )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}