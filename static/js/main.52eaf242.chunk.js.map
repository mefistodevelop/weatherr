{"version":3,"sources":["components/Spinner/images/spinner.svg","keys.js","components/Spinner/Spinner.jsx","components/Location/Location.jsx","components/Weather/Weather.jsx","components/Content/Content.jsx","api/api.js","store/weatherReducer.js","components/Search/Search.jsx","components/Header/Header.jsx","App.js","serviceWorker.js","store/store.js","index.js"],"names":["module","exports","API_KEY","BASE_URL","Spinner","size","className","src","spinnerImage","width","alt","Location","city","country","Weather","temperature","weather","wind","language","useSelector","state","getSign","temp","sign","locals","feelsLike","en","ru","speedUnits","real","description","main","toLowerCase","getIconClass","Content","store","Math","round","feels_like","speed","name","sys","instance","axios","create","baseURL","headers","api","get","then","response","data","initialState","isFetching","setWeather","type","payload","setIsFetching","toggleLanguage","searchWeather","dispatch","a","Search","useState","query","setQuery","useDispatch","placeholder","value","onChange","e","target","onKeyPress","key","trimmedQuery","trim","Header","aria-label","onClick","App","weatherState","currentCity","isWeatherDefined","Object","keys","length","content","useEffect","weatherStatus","currentTime","Date","getHours","defineClassname","Boolean","window","location","hostname","match","createStore","action","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.52eaf242.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.b101b486.svg\";","module.exports = {\n  API_KEY: 'cb10a7cb11e6b08e1f61144ad85f7af3',\n  BASE_URL: 'https://cors-anywhere.herokuapp.com/https://api.openweathermap.org/data/2.5/',\n};\n","import React from 'react';\nimport './Spinner.css';\nimport spinnerImage from './images/spinner.svg';\n\nfunction Spinner({ size }) {\n  return (\n    <div className=\"spinner\">\n      <img\n        className=\"spinner__image\"\n        src={spinnerImage}\n        width={size}\n        alt=\"loading progress spinner\"\n      />\n    </div>\n  );\n}\n\nexport default Spinner;\n","import React from 'react';\nimport './Location.css';\n\nexport const Location = ({ city, country }) => (\n  <div className=\"location\">\n    <span className=\"location__name\">{`${city}, ${country}`}</span>\n  </div>\n);\n","import React from 'react';\nimport './Weather.css';\nimport { useSelector } from 'react-redux';\n\nexport const Weather = ({ temperature, weather, wind }) => {\n  const language = useSelector((state) => state.language);\n\n  const getSign = (temp) => {\n    let sign = '';\n    if (temp > 0) {\n      sign = '+';\n    } else if (temp < 0) {\n      sign = '-';\n    }\n    return sign;\n  };\n\n  const getIconClass = () => {\n    const mainWeather = weather.main.toLowerCase();\n    switch (mainWeather) {\n      case 'clouds':\n        return 'icon-cloud';\n      case 'rain':\n        return 'icon-rainy';\n      case 'snow':\n        return 'icon-snowy';\n      default:\n        return 'icon-sun';\n    }\n  };\n\n  const locals = {\n    feelsLike: {\n      en: 'feels like',\n      ru: 'ощущается как',\n    },\n    wind: {\n      en: 'wind',\n      ru: 'ветер',\n    },\n    speedUnits: {\n      en: 'm/s',\n      ru: 'м/с',\n    },\n  };\n\n  return (\n    <div className=\"weather\">\n      <div className=\"weather__info\">\n        {`${getSign(temperature.real)}${temperature.real}°C`}\n        <div className=\"weather__description\">{weather.description}</div>\n        <div className=\"weather__description\">\n          {`${locals.feelsLike[language]} ${getSign(temperature.feelsLike)}${\n            temperature.feelsLike\n          }°C`}\n        </div>\n        <div className=\"weather__description\">\n          {`${locals.wind[language]} ${wind} ${locals.speedUnits[language]}`}\n        </div>\n      </div>\n      <div className=\"weather__icon\">\n        <span className={getIconClass()} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Location } from '../Location/Location';\nimport { Weather } from '../Weather/Weather';\n\nexport const Content = ({ store }) => {\n  const weather = {\n    main: store.weather[0].main,\n    description: store.weather[0].description,\n  };\n\n  const temperature = {\n    real: Math.round(store.main.temp),\n    feelsLike: Math.round(store.main.feels_like),\n  };\n\n  const wind = Math.round(store.wind.speed);\n\n  return (\n    <div className=\"content\">\n      <Location city={store.name} country={store.sys.country} />\n      <Weather temperature={temperature} weather={weather} wind={wind} />\n    </div>\n  );\n};\n","import axios from 'axios';\nimport { BASE_URL, API_KEY } from '../keys';\n\nconst instance = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'API-KEY': API_KEY,\n  },\n});\n\nexport const api = {\n  getWeather(city, language = 'en') {\n    return instance\n      .get(`weather?q=${city}&units=metric&appid=${API_KEY}&lang=${language}`)\n      .then((response) => response.data);\n  },\n};\n","import { api } from '../api/api';\n\nconst SET_WEATHER = 'SET_WEATHER';\nconst SET_IS_FETCHING = 'SET_IS_FETCHING';\nconst TOGGLE_LANGUAGE = 'TOGGLE_LANGUAGE';\n\nconst initialState = {\n  weather: {},\n  isFetching: false,\n  language: 'en',\n};\n\nexport const weatherReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_WEATHER:\n      return {\n        ...state,\n        weather: action.payload,\n      };\n\n    case SET_IS_FETCHING:\n      return {\n        ...state,\n        isFetching: action.payload,\n      };\n\n    case TOGGLE_LANGUAGE:\n      return {\n        ...state,\n        language: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst setWeather = (weather) => ({ type: SET_WEATHER, payload: weather });\nconst setIsFetching = (isFetching) => ({ type: SET_IS_FETCHING, payload: isFetching });\nexport const toggleLanguage = (language) => ({ type: TOGGLE_LANGUAGE, payload: language });\n\nexport const searchWeather = (city, language) => async (dispatch) => {\n  dispatch(setIsFetching(true));\n  const weather = await api.getWeather(city, language);\n  dispatch(setWeather(weather));\n  dispatch(setIsFetching(false));\n};\n","import React, { useState } from 'react';\nimport './Search.css';\nimport { useDispatch } from 'react-redux';\nimport { searchWeather } from '../../store/weatherReducer';\n\nexport const Search = ({ language }) => {\n  const [query, setQuery] = useState('');\n  const dispatch = useDispatch();\n\n  const placeholder = language === 'en' ? 'Search weather' : 'Искать погоду';\n  const updateQuery = (e) => setQuery(e.target.value);\n\n  const send = (e) => {\n    if (e.key === 'Enter') {\n      const trimmedQuery = query.trim();\n      if (!trimmedQuery) return;\n\n      dispatch(searchWeather(trimmedQuery, language));\n      setQuery('');\n    }\n  };\n\n  return (\n    <div className=\"search\">\n      <input\n        type=\"text\"\n        className=\"search__bar\"\n        placeholder={placeholder}\n        value={query}\n        onChange={updateQuery}\n        onKeyPress={send}\n      />\n      <div className=\"search__icon\" />\n    </div>\n  );\n};\n","import React from 'react';\nimport './Header.css';\nimport { useDispatch } from 'react-redux';\nimport { toggleLanguage } from '../../store/weatherReducer';\nimport { Search } from '../Search/Search';\n\nexport const Header = ({ language }) => {\n  const dispatch = useDispatch();\n\n  const toggleLang = () => {\n    if (language === 'en') {\n      dispatch(toggleLanguage('ru'));\n    } else {\n      dispatch(toggleLanguage('en'));\n    }\n  };\n\n  return (\n    <header className=\"header\">\n      <div className=\"header__container\">\n        <span className=\"header__logo\">Weatherr</span>\n        <div className=\"header__search\">\n          <Search language={language} />\n        </div>\n        <button\n          type=\"button\"\n          className=\"header__toggle\"\n          aria-label=\"change language\"\n          onClick={toggleLang}\n        >\n          {language === 'en' ? 'ru' : 'en'}\n        </button>\n      </div>\n    </header>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Spinner from './components/Spinner/Spinner';\nimport { Content } from './components/Content/Content';\nimport { Header } from './components/Header/Header';\nimport { searchWeather } from './store/weatherReducer';\n\nfunction App() {\n  const weatherState = useSelector((state) => state.weather);\n  const isFetching = useSelector((state) => state.isFetching);\n  const language = useSelector((state) => state.language);\n  const currentCity = useSelector((state) => state.weather.name);\n  const dispatch = useDispatch();\n\n  const isWeatherDefined = () => {\n    if (Object.keys(weatherState).length !== 0) {\n      return true;\n    }\n    return false;\n  };\n\n  const defineClassname = () => {\n    if (!isWeatherDefined()) return '';\n\n    const weatherStatus = weatherState.weather[0].main.toLowerCase();\n    const temperature = Math.round(weatherState.main.temp);\n    const currentTime = new Date().getHours();\n\n    if (!(currentTime <= 21 || currentTime < 5)) return 'night';\n    if (weatherStatus === 'rain' || weatherStatus === 'clouds') return weatherStatus;\n\n    if (temperature >= 28) return 'hot';\n    if (temperature <= 5) return 'cold';\n\n    return '';\n  };\n\n  const updateWeather = () => {\n    if (currentCity) dispatch(searchWeather(currentCity, language));\n  };\n\n  const content = isWeatherDefined() ? <Content store={weatherState} /> : '';\n\n  useEffect(() => {\n    updateWeather();\n    // eslint-disable-next-line\n  }, [language]);\n\n  return (\n    <div className={`App ${defineClassname()}`}>\n      <Header language={language} />\n      <div className=\"App__wrapper\">\n        {isFetching\n          ? <Spinner size={100} />\n          : content}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { weatherReducer } from './weatherReducer';\n\nexport const store = createStore(weatherReducer, applyMiddleware(thunk));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}