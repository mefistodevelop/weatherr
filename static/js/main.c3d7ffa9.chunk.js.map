{"version":3,"sources":["components/Spinner/images/spinner.svg","keys.js","api/api.js","store/weatherReducer.js","components/Search/Search.jsx","components/Spinner/Spinner.jsx","components/Location/Location.jsx","components/Weather/Weather.jsx","components/Content/Content.jsx","components/Header/Header.jsx","App.js","serviceWorker.js","store/store.js","index.js"],"names":["module","exports","API_KEY","BASE_URL","instance","axios","create","baseURL","headers","api","city","language","get","then","response","data","initialState","weather","isFetching","setWeather","type","payload","setIsFetching","toggleLanguage","searchWeather","dispatch","a","Search","useState","query","setQuery","useDispatch","placeholder","className","value","onChange","e","target","onKeyPress","key","trimmedQuery","trim","Spinner","size","src","spinnerImage","width","alt","Location","country","Weather","temperature","roundedTemperature","Math","round","tempSign","temp","sign","getSign","Content","store","isWeatherDefined","name","sys","main","description","Header","aria-label","onClick","App","weatherState","useSelector","state","currentCity","Object","keys","length","useEffect","weatherStatus","toLowerCase","defineClassname","Boolean","window","location","hostname","match","createStore","action","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c3d7ffa9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.b101b486.svg\";","module.exports = {\n  API_KEY: 'cb10a7cb11e6b08e1f61144ad85f7af3',\n  BASE_URL: 'https://cors-anywhere.herokuapp.com/https://api.openweathermap.org/data/2.5/',\n};\n","import axios from 'axios';\nimport { BASE_URL, API_KEY } from '../keys';\n\nconst instance = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'API-KEY': API_KEY,\n  },\n});\n\nexport const api = {\n  getWeather(city, language = 'en') {\n    return instance\n      .get(`weather?q=${city}&units=metric&appid=${API_KEY}&lang=${language}`)\n      .then((response) => response.data);\n  },\n};\n","import { api } from '../api/api';\n\nconst SET_WEATHER = 'SET_WEATHER';\nconst SET_IS_FETCHING = 'SET_IS_FETCHING';\nconst TOGGLE_LANGUAGE = 'TOGGLE_LANGUAGE';\n\nconst initialState = {\n  weather: {},\n  isFetching: false,\n  language: 'en',\n};\n\nexport const weatherReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_WEATHER:\n      return {\n        ...state,\n        weather: action.payload,\n      };\n\n    case SET_IS_FETCHING:\n      return {\n        ...state,\n        isFetching: action.payload,\n      };\n\n    case TOGGLE_LANGUAGE:\n      return {\n        ...state,\n        language: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst setWeather = (weather) => ({ type: SET_WEATHER, payload: weather });\nconst setIsFetching = (isFetching) => ({ type: SET_IS_FETCHING, payload: isFetching });\nexport const toggleLanguage = (language) => ({ type: TOGGLE_LANGUAGE, payload: language });\n\nexport const searchWeather = (city, language) => async (dispatch) => {\n  dispatch(setIsFetching(true));\n  const weather = await api.getWeather(city, language);\n  dispatch(setWeather(weather));\n  dispatch(setIsFetching(false));\n};\n","import React, { useState } from 'react';\nimport './Search.css';\nimport { useDispatch } from 'react-redux';\nimport { searchWeather } from '../../store/weatherReducer';\n\nexport const Search = ({ language }) => {\n  const [query, setQuery] = useState('');\n  const dispatch = useDispatch();\n\n  const placeholder = language === 'en' ? 'Search weather' : 'Искать погоду';\n  const updateQuery = (e) => setQuery(e.target.value);\n\n  const send = (e) => {\n    if (e.key === 'Enter') {\n      const trimmedQuery = query.trim();\n      if (!trimmedQuery) return;\n\n      dispatch(searchWeather(trimmedQuery, language));\n      setQuery('');\n    }\n  };\n\n  return (\n    <div className=\"search\">\n      <input\n        type=\"text\"\n        className=\"search__bar\"\n        placeholder={placeholder}\n        value={query}\n        onChange={updateQuery}\n        onKeyPress={send}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport './Spinner.css';\nimport spinnerImage from './images/spinner.svg';\n\nfunction Spinner({ size }) {\n  return (\n    <div className=\"spinner\">\n      <img\n        className=\"spinner__image\"\n        src={spinnerImage}\n        width={size}\n        alt=\"loading progress spinner\"\n      />\n    </div>\n  );\n}\n\nexport default Spinner;\n","import React from 'react';\nimport './Location.css';\n\nexport const Location = ({ city, country }) => (\n  <div className=\"location\">\n    <span className=\"location__name\">{`${city}, ${country}`}</span>\n  </div>\n);\n","import React from 'react';\nimport './Weather.css';\n\nexport const Weather = ({ temperature, weather }) => {\n  const roundedTemperature = Math.round(temperature);\n  const getSign = (temp) => {\n    let sign = '';\n    if (temp > 0) {\n      sign = '+';\n    } else if (temp < 0) {\n      sign = '-';\n    }\n    return sign;\n  };\n\n  const tempSign = getSign(roundedTemperature);\n\n  return (\n    <div className=\"weather\">\n      <div className=\"weather__temperature\">{`${tempSign}${roundedTemperature}°C`}</div>\n      <div className=\"weather__description\">{weather}</div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Location } from '../Location/Location';\nimport { Weather } from '../Weather/Weather';\n\nexport const Content = ({ store, isWeatherDefined }) => (\n  <div className=\"content\">\n    {isWeatherDefined() ? (\n      <>\n        <Location city={store.name} country={store.sys.country} />\n        <Weather\n          temperature={store.main.temp}\n          weather={store.weather[0].description}\n        />\n      </>\n    ) : (\n      ''\n    )}\n  </div>\n);\n","import React from 'react';\nimport './Header.css';\nimport { useDispatch } from 'react-redux';\nimport { toggleLanguage } from '../../store/weatherReducer';\n\nexport const Header = ({ language }) => {\n  const dispatch = useDispatch();\n\n  const toggleLang = () => {\n    if (language === 'en') {\n      dispatch(toggleLanguage('ru'));\n    } else {\n      dispatch(toggleLanguage('en'));\n    }\n  };\n\n  return (\n    <header className=\"header\">\n      <div className=\"header__container\">\n        <span className=\"header__logo\">Weatherr</span>\n        <button\n          type=\"button\"\n          className=\"header__toggle\"\n          aria-label=\"change language\"\n          onClick={toggleLang}\n        >\n          {language === 'en' ? 'ru' : 'en'}\n        </button>\n      </div>\n    </header>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Search } from './components/Search/Search';\nimport Spinner from './components/Spinner/Spinner';\nimport { Content } from './components/Content/Content';\nimport { Header } from './components/Header/Header';\nimport { searchWeather } from './store/weatherReducer';\n\nfunction App() {\n  const weatherState = useSelector((state) => state.weather);\n  const isFetching = useSelector((state) => state.isFetching);\n  const language = useSelector((state) => state.language);\n  const currentCity = useSelector((state) => state.weather.name);\n  const dispatch = useDispatch();\n\n  const isWeatherDefined = () => {\n    if (Object.keys(weatherState).length !== 0) {\n      return true;\n    }\n    return false;\n  };\n\n  const defineClassname = () => {\n    if (!isWeatherDefined()) return '';\n\n    let className = '';\n    const weatherStatus = weatherState.weather[0].main.toLowerCase();\n    const temperature = Math.round(weatherState.main.temp);\n\n    if (weatherStatus === 'rain' || weatherStatus === 'clouds') className = weatherStatus;\n\n    if (temperature >= 28) {\n      className = 'hot';\n    } else if (temperature <= 5) {\n      className = 'cold';\n    }\n\n    return className;\n  };\n\n  const updateWeather = () => {\n    if (currentCity) dispatch(searchWeather(currentCity, language));\n  };\n\n  useEffect(() => {\n    updateWeather();\n    // eslint-disable-next-line\n  }, [language]);\n\n  return (\n    <div className={`App ${defineClassname()}`}>\n      <Header language={language} />\n      <div className=\"App__wrapper\">\n        <Search language={language} />\n\n        {isFetching\n          ? <Spinner size={100} />\n          : (\n            <Content store={weatherState} isWeatherDefined={isWeatherDefined} />\n          )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { weatherReducer } from './weatherReducer';\n\nexport const store = createStore(weatherReducer, applyMiddleware(thunk));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}